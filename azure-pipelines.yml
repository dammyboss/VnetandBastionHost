# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pool:
  vmImage: ubuntu-latest

variables:
  azureServiceConnection: 'dami-connection'
  azureResourceGroup: bicep
  subscriptionId: '85c7908d-8028-4894-af5d-1991ee8f0450'
  key: 'terraform.tfstate'
  container: 'damicontainertf'

jobs:
- job: TerraformInit
  steps:
  - task: TerraformInstaller@0
    displayName: TerafformInstallation
    inputs:
      terraformVersion: 'latest'
  - task: TerraformTaskV3@3
    displayName: Terraform Init
    inputs:
      provider: 'azurerm'
      command: 'init'
      backendServiceArm: '$(azureServiceConnection)'
      backendAzureRmResourceGroupName: '$(azureResourceGroup)'
      backendAzureRmStorageAccountName: '$(damiteststorage)'
      backendAzureRmContainerName: '$(container)'
      backendAzureRmKey: '$(key)'

    
- job: TerraformApply
  dependsOn: TerraformInit
  steps:
  - task: TerraformTaskV3@3
    displayName: Terraform Init
    inputs:
      provider: 'azurerm'
      command: 'init'
      backendServiceArm: '$(azureServiceConnection)'
      backendAzureRmResourceGroupName: '$(azureResourceGroup)'
      backendAzureRmStorageAccountName: '$(damiteststorage)'
      backendAzureRmContainerName: '$(container)'
      backendAzureRmKey: '$(key)'
  - task: TerraformTaskV3@3
    displayName: Plan
    inputs:
      provider: 'azurerm'
      command: 'plan'
      environmentServiceNameAzureRM: '$(azureServiceConnection)'
  
  # - task: TerraformTaskV3@3
  #   displayName: Apply
  #   inputs:
  #     provider: 'azurerm'
  #     command: 'apply'
  #     environmentServiceNameAzureRM: '$(azureServiceConnection)'
  
  - task: TerraformTaskV3@3
    displayName: Apply
    inputs:
      provider: 'azurerm'
      command: 'apply'
      environmentServiceNameAzureRM: 'Visual Studio Enterprise(1)(85c7908d-8028-4894-af5d-1991ee8f0450)'
